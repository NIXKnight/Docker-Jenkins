name: Build Jenkins LTS Docker Image
on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: "${GITHUB_WORKSPACE}/Docker-Jenkins"

      - name: Download Artifacts of Last Workflow
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ secrets.DOCKER_GITHUB_TOKEN }}
          workflow: dockerimage.yml
          name: 'JENKINS_STABLE_VERSION'
          path: "${GITHUB_WORKSPACE}/old_artifacts"
          repo: ${{ github.repository }}

      - name: Check for New Jenkins LTS Version Availability
        id: vars
        shell: bash
        working-directory: ${GITHUB_WORKSPACE}
        run: |
          if [ -f "old_artifacts/jenkins_stable_version.txt" ] ; then
            OLD_JENKINS_STABLE_VERSION=$(cat old_artifacts/jenkins_stable_version.txt)
          else
            OLD_JENKINS_STABLE_VERSION=""
          fi
          CURRENT_JENKINS_STABLE_VERSION=$(curl -L http://updates.jenkins-ci.org/stable/latestCore.txt)
          if [ "$OLD_JENKINS_STABLE_VERSION" == "$CURRENT_JENKINS_STABLE_VERSION" ] ; then
            echo -e "New Jenkins stable version is not available."
          else
            echo -e "New Jenkins stable version available."
            echo -e $CURRENT_JENKINS_STABLE_VERSION > jenkins_stable_version.txt
            echo ::set-output name=BUILD_JENKINS_STABLE_VERSION::true
            echo ::set-output name=CURRENT_JENKINS_STABLE_VERSION::${CURRENT_JENKINS_STABLE_VERSION}
          fi

      - name: Build Jenkins LTS Latest Docker Image
        shell: bash
        env:
          USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        working-directory: ${GITHUB_WORKSPACE}/Docker-Jenkins
        run: |
          docker build . --file Dockerfile --build-arg JENKINS_VERSION=${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }} \
            --tag docker.pkg.github.com/${USERNAME}/docker-jenkins/docker-jenkins:lts-${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }} \
            --tag docker.pkg.github.com/${USERNAME}/docker-jenkins/docker-jenkins:lts-latest \
            --tag "${USERNAME}/jenkins:lts-${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }}" \
            --tag "${USERNAME}/jenkins:lts-latest"
        if: ${{ steps.vars.outputs.BUILD_JENKINS_STABLE_VERSION }}

      - name: Push Jenkins LTS Latest Docker Image to Docker Hub and GitHub Registries
        shell: bash
        env:
          USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          DOCKER_GITHUB_TOKEN: ${{ secrets.DOCKER_GITHUB_TOKEN }}
        run: |
          docker login -u ${USERNAME} -p ${DOCKER_HUB_TOKEN}
          docker push "${USERNAME}/jenkins:lts-${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }}"
          docker push "${USERNAME}/jenkins:lts-latest"
          docker logout
          docker login docker.pkg.github.com -u ${USERNAME} -p ${DOCKER_GITHUB_TOKEN}
          docker push "docker.pkg.github.com/${USERNAME}/docker-jenkins/docker-jenkins:lts-${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }}"
          docker push "docker.pkg.github.com/${USERNAME}/docker-jenkins/docker-jenkins:lts-latest"
          docker logout
        if: ${{ steps.vars.outputs.BUILD_JENKINS_STABLE_VERSION }}

      - name: Send Telegram Notification for Jenkins LTS Build
        shell: bash
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text="Docker image for Jenkins LTS updated to ${{ steps.vars.outputs.CURRENT_JENKINS_STABLE_VERSION }}"
        if: ${{ steps.vars.outputs.BUILD_JENKINS_STABLE_VERSION }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: 'JENKINS_STABLE_VERSION'
          path: "${GITHUB_WORKSPACE}/jenkins_stable_version.txt"
